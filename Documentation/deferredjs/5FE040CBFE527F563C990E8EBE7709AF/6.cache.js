$wnd.Documentation.runAsyncCallback6("function r7b(){sab(this,b7b(new c7b(this)))}\nfunction e7b(a,b){var c;c=new Utc;c.a+=HGc;Rtc(c,V5(a));c.a+=GGc;Rtc(c,V5(b));c.a+=IGc;return new G5(c.a)}\nfunction b7b(a){var b,c,d,e,f,g;c=new etb(e7b(a.a,a.p).a);jw((H6(),c.L),NGc,'PWT - Injection Framework');b=B6(c.L);y6(a.b);y6(a.r);b.b?Rv(b.b,b.a,b.c):D6(b.a);Qab(c,(d=new htb(f7b(a.c).a),e=B6(d.L),y6(a.o),e.b?Rv(e.b,e.a,e.c):D6(e.a),Qab(d,(f=new otb(1),mtb(f,(g=new Utc,g.a+=XHc,new G5(g.a)).a),f),y6(a.o)),a.K.k=d,d),y6(a.b));Qab(c,a7b(a),y6(a.r));return c}\nfunction f7b(a){var b;b=new Utc;b.a+=HGc;Rtc(b,V5(a));b.a+=\"'><\\/span> <p class='lead'> <strong title='Putnami Web Toolkit'>PWT<\\/strong> provides a lot of good features, reducing the amount of code needed to develop great applications.<br> But we think that it is still not enough. That's why we developped the injection part of the framework, further reducing the code amount. <\\/p>\";return new G5(b.a)}\nfunction c7b(a){this.K=a;this.c=_w($doc);this.s=_w($doc);this.u=_w($doc);this.w=_w($doc);this.B=_w($doc);this.D=_w($doc);this.G=_w($doc);this.I=_w($doc);this.d=_w($doc);this.f=_w($doc);this.i=_w($doc);this.k=_w($doc);this.a=_w($doc);this.p=_w($doc);this.o=new z6(this.c);this.t=new z6(this.s);this.v=new z6(this.u);this.A=new z6(this.w);this.C=new z6(this.B);this.F=new z6(this.D);this.H=new z6(this.G);this.J=new z6(this.I);this.e=new z6(this.d);this.g=new z6(this.f);this.j=new z6(this.i);this.n=new z6(this.k);this.b=new z6(this.a);this.r=new z6(this.p)}\nfunction a7b(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B;c=new etb(d7b(a.s,a.u,a.w,a.B,a.D,a.G,a.I,a.d,a.f,a.i,a.k).a);b=B6((H6(),c.L));y6(a.t);y6(a.v);y6(a.A);y6(a.C);y6(a.F);y6(a.H);y6(a.J);y6(a.e);y6(a.g);y6(a.j);y6(a.n);b.b?Rv(b.b,b.a,b.c):D6(b.a);Qab(c,(d=new otb(2),mtb(d,(o=new Utc,o.a+=AOc,new G5(o.a)).a),jw(d.L,SJc,TJc),d),y6(a.t));Qab(c,(e=new emb((p=new Utc,p.a+='<h4>Note :<\\/h4>The view associated to places via <code>@ActivityDescription<\\/code> annotation are created via the <code>GWT.create<\\/code> method.',new G5(p.a)).a),cmb(e,(qmb(),nmb)),e),y6(a.v));Qab(c,(f=new otb(2),mtb(f,(q=new Utc,q.a+='What can be injected?',new G5(q.a)).a),jw(f.L,SJc,TJc),f),y6(a.A));Qab(c,(g=new otb(3),mtb(g,(r=new Utc,r.a+='On <em>Injected<\\/em>, <em>View<\\/em> or <em>Module<\\/em> classes',new G5(r.a)).a),jw(g.L,SJc,TJc),g),y6(a.C));Qab(c,(h=new emb((s=new Utc,s.a+='<h4>Note :<\\/h4> <ul> <li>All those annotations work with GWT rebind feature, and work only on <code>Injected<\\/code>, <code>View<\\/code> or <code>Module<\\/code> implementing classes.<\\/li> <\\/ul>',new G5(s.a)).a),cmb(h,nmb),h),y6(a.F));Qab(c,(i=new otb(3),mtb(i,(t=new Utc,t.a+='On <em>View<\\/em> classes',new G5(t.a)).a),jw(i.L,SJc,TJc),i),y6(a.H));Qab(c,(j=new emb((u=new Utc,u.a+='<h4>Note :<\\/h4> <ul> <li>Those annotations work with GWT rebind feature, and work only on <code>View<\\/code> implementing classes.<\\/li> <\\/ul>',new G5(u.a)).a),cmb(j,nmb),j),y6(a.J));Qab(c,(k=new otb(3),mtb(k,(v=new Utc,v.a+='On <em>Module<\\/em> classes',new G5(v.a)).a),jw(k.L,SJc,TJc),k),y6(a.e));Qab(c,(l=new emb((w=new Utc,w.a+='<h4>Note :<\\/h4> <ul> <li>Those annotations work with GWT rebind feature, and work only on <code>Module<\\/code> implementing classes.<\\/li> <\\/ul>',new G5(w.a)).a),cmb(l,nmb),l),y6(a.g));Qab(c,(m=new otb(2),mtb(m,(A=new Utc,A.a+=BOc,new G5(A.a)).a),jw(m.L,SJc,TJc),m),y6(a.j));Qab(c,(n=new anc,_mc(n,(B=new Utc,B.a+=COc,new G5(B.a)).a),$mc(n,(Jnc(),Inc)),n),y6(a.n));a.K.j=c;return c}\nfunction d7b(a,b,c,d,e,f,g,h,i,j,k){var l;l=new Utc;l.a+=HGc;Rtc(l,V5(a));l.a+=\"'><\\/span> <p>We use the rebind feature of GWT. This feature can be enabled on classes which <em>implement specific interface<\\/em>. Such classes go throught the rebind mecanism when they are created via the <code>GWT.create<\\/code> method.<\\/p>  <p>We created some interfaces to implements in order to allow this injection : <ul> <li><code>Injected<\\/code> for standard classes<\\/li> <li><code>View<\\/code> for view classes<\\/li> <li><code>Module<\\/code> for entry point classes<\\/li> <\\/ul> Each one accepts different annotations corresponding to its role in the application. <\\/p> <span id='\";Rtc(l,V5(b));l.a+=GGc;Rtc(l,V5(c));l.a+=GGc;Rtc(l,V5(d));l.a+=\"'><\\/span> <p>We provide the following annotations :<\\/p> <ul> <li><code>PostConstruct<\\/code> used on method in order to do some things with injected stuff (after injection) at init time.<\\/li> <li><code>Templated<\\/code> used on <code>Composite<\\/code> extending class to bind it to template (see <a href='#!Internationalization'>Internationalization<\\/a>)<\\/li> <li><code>InjectResource<\\/code> used on field to generate <code>GWT.create<\\/code> call.<\\/li> <li><code>InjectService<\\/code> used on service interface to init and bind the service to the class (see <a href='#!ServerCalls'>ServerCalls<\\/a>)<\\/li> <li><code>InjectModel<\\/code> used on field of type <code>Model&lt;T&gt;<\\/code> to generate a specific model (see <a href='#!DataBinding'>DataBinding<\\/a>)<\\/li> <li><code>Initialize<\\/code> used on <code>EditorModel<\\/code> implementing field to initialize the forms (see <a href='#!DataBinding'>DataBinding<\\/a>)<\\/li> <li><code>ErrorHandler<\\/code> used on method to generate <code>ErrorHandler<\\/code> extending classes (see <a href='#!Errors'>Errors handling<\\/a>)<\\/li> <\\/ul> <span id='\";Rtc(l,V5(e));l.a+=XJc;Rtc(l,V5(f));l.a+=\"'><\\/span> <p>In addition, we provide the following annotations :<\\/p> <ul> <li><code>PresentHandler<\\/code>, <code>MayStopActivityHandler<\\/code> and <code>StopActivityHandler<\\/code> used on methods for handling the lifecycle of an activity (see <a href='#!Navigation'>Navigation<\\/a>)<\\/li> <li><code>Secured<\\/code> used on view class to secure them (see <a href='#!Security'>Security<\\/a>)<\\/li> <\\/ul> <span id='\";Rtc(l,V5(g));l.a+=WJc;Rtc(l,V5(h));l.a+=\"'><\\/span> <p>In addition, we provide the following annotations :<\\/p> <ul> <li><code>MvpDescription<\\/code> used on the class to describe the Mvp part of the app : display panel, default place, availables activities (see <a href='#!Navigation'>Navigation<\\/a>)<\\/li> <li><code>ThemeDescription<\\/code> used on the class to init the theme of the application (see <a href='#!Bootstrap'>Bootstrap<\\/a>)<\\/li> <li><code>ErrorManagmentDescription<\\/code> used on the class to describe the Error handling : set the error manager, add some error handlers. (see <a href='#!Errors'>Errors handling<\\/a>)<\\/li> <li><code>EntryPointHandler<\\/code> used on methods to be called on entry point start instead of <code>onModuleStart()<\\/code> method (see <a href='#!Navigation'>Navigation<\\/a>)<\\/li> <\\/ul> <span id='\";Rtc(l,V5(i));l.a+=WJc;Rtc(l,V5(j));l.a+=\"'><\\/span> <p>In order to use the annotations, you'll have to import the <code>Inject<\\/code> module in your module xml file<\\/p> <span id='\";Rtc(l,V5(k));l.a+=IGc;return new G5(l.a)}\nq3(1362,46,OJc);var wX=trc(uIc,'InjectionPage',1362,SU);q3(988,1,{},c7b);var sX=trc(uIc,'InjectionPage_InjectionPageTemplateBinder_UiBinderLocalized_BinderImpl/Widgets',988,z1);var g7b;q3(637,1,jIc);_.Je=function q7b(){var a;!($4(),g7b)&&(g7b=new r7b);a=new J$b;rjb(a,g7b);kjb(this.a,a)};q3(900,1362,PJc,r7b);_.th=function s7b(a,b){G$b(this);b.xe(this)};var vX=trc(uIc,'InjectionPage_Injector',900,wX);qEc(Vt)(6);\n//# sourceURL=Documentation-6.js\n")
