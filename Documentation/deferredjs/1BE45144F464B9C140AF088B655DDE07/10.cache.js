$wnd.Documentation.runAsyncCallback10("function F9b(){pab(this,I9b(new J9b(this)))}\nfunction M9b(a,b){var c;c=new duc;c.a+=UGc;auc(c,X5(a));c.a+=TGc;auc(c,X5(b));c.a+=VGc;return new I5(c.a)}\nfunction I9b(a){var b,c,d,e,f,g;c=new otb(M9b(a.b,a.F).a);jw((J6(),c.L),$Gc,'PWT - Navigation MVP Framework');b=D6(c.L);A6(a.c);A6(a.G);b.b?Rv(b.b,b.a,b.c):F6(b.a);Nab(c,(d=new rtb(L9b(a.d).a),e=D6(d.L),A6(a.D),e.b?Rv(e.b,e.a,e.c):F6(e.a),Nab(d,(f=new ytb(1),wtb(f,(g=new duc,g.a+=jIc,new I5(g.a)).a),f),A6(a.D)),a.V.k=d,d),A6(a.c));Nab(c,H9b(a),A6(a.G));return c}\nfunction L9b(a){var b;b=new duc;b.a+=UGc;auc(b,X5(a));b.a+=\"'><\\/span> <p class='lead'> <strong title='Putnami Web Toolkit'>PWT<\\/strong> offer a simple navigation framework.  <br> Based on the <abbr title='Model View Presenter'>MVP<\\/abbr> pattern, this framework allows to easily create view and go through them. <br> It equally allows to handle the browser history.  <br> And finally makes your web app scalable without any efforts. <\\/p>\";return new I5(b.a)}\nfunction J9b(a){this.V=a;this.d=cx($doc);this.H=cx($doc);this.J=cx($doc);this.L=cx($doc);this.N=cx($doc);this.P=cx($doc);this.R=cx($doc);this.T=cx($doc);this.e=cx($doc);this.g=cx($doc);this.j=cx($doc);this.n=cx($doc);this.p=cx($doc);this.s=cx($doc);this.u=cx($doc);this.w=cx($doc);this.B=cx($doc);this.b=cx($doc);this.F=cx($doc);this.D=new B6(this.d);this.I=new B6(this.H);this.K=new B6(this.J);this.M=new B6(this.L);this.O=new B6(this.N);this.Q=new B6(this.P);this.S=new B6(this.R);this.U=new B6(this.T);this.f=new B6(this.e);this.i=new B6(this.g);this.k=new B6(this.j);this.o=new B6(this.n);this.r=new B6(this.p);this.t=new B6(this.s);this.v=new B6(this.u);this.A=new B6(this.w);this.C=new B6(this.B);this.c=new B6(this.b);this.G=new B6(this.F);this.a=(Mnc(),Lnc)}\nfunction H9b(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L;c=new otb(K9b(a.H,a.J,a.L,a.N,a.P,a.R,a.T,a.e,a.g,a.j,a.n,a.p,a.s,a.u,a.w,a.B).a);b=D6((J6(),c.L));A6(a.I);A6(a.K);A6(a.M);A6(a.O);A6(a.Q);A6(a.S);A6(a.U);A6(a.f);A6(a.i);A6(a.k);A6(a.o);A6(a.r);A6(a.t);A6(a.v);A6(a.A);A6(a.C);b.b?Rv(b.b,b.a,b.c):F6(b.a);Nab(c,(d=new ytb(2),wtb(d,(s=new duc,s.a+=\"What's MVP\",new I5(s.a)).a),jw(d.L,dKc,eKc),d),A6(a.I));Nab(c,(e=new ytb(2),wtb(e,(t=new duc,t.a+=\"PWT's MVP framework\",new I5(t.a)).a),jw(e.L,dKc,eKc),e),A6(a.K));Nab(c,(f=new ytb(2),wtb(f,(u=new duc,u.a+='By the practice',new I5(u.a)).a),jw(f.L,dKc,eKc),f),A6(a.M));Nab(c,(g=new ytb(3),wtb(g,(v=new duc,v.a+='Build a View',new I5(v.a)).a),jw(g.L,dKc,eKc),g),A6(a.O));Nab(c,new lmb((w=new duc,w.a+=\"<h4>Note :<\\/h4> <p>All server calls during the view presentation are collected and send once to the server. Please see <a href='#!ServerCalls'>Server calls<\\/a> for mor details about it.<\\/p>\",new I5(w.a)).a),A6(a.Q));Nab(c,(h=new lnc,knc(h,(A=new duc,A.a+='<pre>\\npublic class BlogView extends Composite implements View {\\n\\tpublic BlogView(){\\n\\t\\t//Build your view.\\n\\t}\\n\\t\\n\\t@PresentHandler\\n\\tpublic void present(BlogPlace place) {\\n\\t\\tString blogId = place.getToken();\\n\\t\\t// get the post on the server and display it.\\n\\t}\\n\\t\\n\\t@MayStopActivityHandler\\n\\tpublic String mayStop() {\\n\\t\\treturn \"The message displayed if we don\\'t want the activity to stop, null else\";\\n\\t}\\n\\t\\n\\t@StopActivityHandler\\n\\tpublic void stopActivity() {\\n\\t\\t//Do something\\n\\t}\\n\\t\\n}\\n<\\/pre>',new I5(A.a)).a),jnc(h,a.a),h),A6(a.S));Nab(c,(i=new ytb(3),wtb(i,(B=new duc,B.a+='Create a Place',new I5(B.a)).a),jw(i.L,dKc,eKc),i),A6(a.U));Nab(c,(j=new lnc,knc(j,(C=new duc,C.a+='<pre>\\n@ActivityDescription(view = BlogView.class)\\npublic class BlogPlace extends ViewPlace {\\n\\tpublic BlogPlace(String postId) {\\n\\t\\tsuper(postId);\\n\\t}\\n}\\n<\\/pre>',new I5(C.a)).a),jnc(j,a.a),j),A6(a.f));Nab(c,(k=new ytb(3),wtb(k,(D=new duc,D.a+='Init the Framework',new I5(D.a)).a),jw(k.L,dKc,eKc),k),A6(a.i));Nab(c,(l=new lnc,knc(l,(F=new duc,F.a+='<pre>\\npublic class MyApp implements EntryPoint {\\n\\tpublic void onModuleLoad() {\\n\\t\\tMvpController controller = MvpController.get();\\n\\n\\t\\tAcceptsOneWidget display = new SimplePanel();\\n\\t\\tcontroller.setDisplay(display);\\n\\n\\t\\tcontroller.setDefaultPlace(new WelcomePlace());\\n\\t\\t\\n\\t\\tcontroller.registerActivity(GWT.&lt;ActivityFactory&gt; create(BlogPlace.class));\\n\\t\\tcontroller.handleCurrentHistory();\\n\\t}\\n}\\n<\\/pre>',new I5(F.a)).a),jnc(l,a.a),l),A6(a.k));Nab(c,(m=new lnc,knc(m,(G=new duc,G.a+='<pre>\\n@MvpDescription(\\n\\t\\tdisplay = SimplePanel.class,\\n\\t\\tdefaultPlace = WelcomePlace.class,\\n\\t\\tactivities = {\\n\\t\\t\\t\\tBlogPlace.class\\n\\t\\t})\\npublic class MyApp implements Module {\\n\\t\\n}\\n<\\/pre>',new I5(G.a)).a),jnc(m,a.a),m),A6(a.o));Nab(c,(n=new lnc,knc(n,(H=new duc,H.a+='<pre>\\n\\t...\\n\\t@EntryPointHandler\\n\\tpublic void start() {\\n\\t\\t//Do Something\\n\\t}\\n\\t...\\n<\\/pre>',new I5(H.a)).a),jnc(n,a.a),n),A6(a.r));Nab(c,(o=new ytb(3),wtb(o,(I=new duc,I.a+='Go to a Place',new I5(I.a)).a),jw(o.L,dKc,eKc),o),A6(a.t));Nab(c,(p=new lnc,knc(p,(J=new duc,J.a+='<pre>\\nMvpController.get().goTo(new BlogPlace(\"myPost\"));\\n<\\/pre>',new I5(J.a)).a),jnc(p,a.a),p),A6(a.v));Nab(c,(q=new ytb(2),wtb(q,(K=new duc,K.a+='Scaling the web app',new I5(K.a)).a),jw(q.L,dKc,eKc),q),A6(a.A));Nab(c,(r=new lnc,knc(r,(L=new duc,L.a+='<pre>\\npublic class MyView_ProxyView extends MetaPropertyPlace implements ViewProxy&lt;MetaPropertyPlace&gt; {\\n    private static MyView view;\\n    \\n    public void loadView(final ViewProxy.Callback callback) {\\n     GWT.runAsync(MetaPropertyPage.class, new RunAsyncCallback() {\\n        public void onFailure(Throwable reason) {\\n          if (ApplicationUnreachableException.HTTP_DOWNLOAD_FAILURE_EXCEPTION.equals(reason.getClass().getSimpleName())) {\\n            reason = new ApplicationUnreachableException(reason);\\n          }\\n          GWT.reportUncaughtException(reason);\\n        }\\n        public void onSuccess() {\\n          if(view == null || false){\\n            view = GWT.create(MyView.class);\\n          }\\n          callback.showView(view);\\n        }\\n      });\\n    }\\n}\\n<\\/pre>',new I5(L.a)).a),jnc(r,a.a),r),A6(a.C));a.V.j=c;return c}\nfunction K9b(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){var q;q=new duc;q.a+=UGc;auc(q,X5(a));q.a+=\"'><\\/span> <p> The <abbr title='Model View Presenter'>MVP<\\/abbr> is a derived of the well-known <abbr title='Model View Controller'>MVC<\\/abbr> pattern.  It keeps the same goals, but evicts the views's interactions, for reduce coupling of the application. <br> The <abbr title='Model View Presenter'>MVP<\\/abbr> allows a better scalability for the complex web app.  <br> You can have a full description of the <abbr title='Model View Presenter'>MVP<\\/abbr> pattern on the <a href='http://www.gwtproject.org/articles/mvp-architecture.html' target='_BLANK'>GWT documentation<\\/a>. <br> <\\/p>  <span id='\";auc(q,X5(b));q.a+=\"'><\\/span> <p> In the main lines, the <strong title='Punami Web Toolkit'>PWT<\\/strong>'s <abbr title='Model View Presenter'>MVP<\\/abbr> framework ideas are : <\\/p> <ul> <li><code>MvpController<\\/code> dispaches the wished <code>Place<\\/code> through the <code>MvpActivity<\\/code>.<\\/li> <li><code>MvpController<\\/code> handles event from the <code>EventBus<\\/code> and starts a <code>MvpActivity<\\/code>.<\\/li> <li><code>MvpController<\\/code> deals with the <code>MvpActivity<\\/code> life cyle, start, mayStop and stop the <code>MvpActivity<\\/code>.<\\/li> <li><code>MvpController<\\/code> manages the <code>PlaceHistoryMapper<\\/code> for managing the browser history tokens.<\\/li> <li><code>MvpActivity<\\/code> is in charge of presenting the view and place it in a displayer.<\\/li> <\\/ul>  <span id='\";auc(q,X5(c));q.a+=\"'><\\/span> <p> In the following sample, you can see a simple implementation of blog place / view mechanism. <\\/p> <span id='\";auc(q,X5(d));q.a+=\"'><\\/span> <div class='showcase-sample-block'> <div class='showcase-sample'> Build a view which implements <code>View<\\/code> in order to present your place.<br> Anotate methods in the view with <code>@PresentHandler<\\/code> with a <code>Place<\\/code> argument in order to have them called on place presenting. <br> Anotate methods in the view with <code>@MayStopActivityHandler<\\/code> with a <code>String<\\/code> return in order to have them called when place may stop. <br> Anotate methods in the view with <code>@StopActivityHandler<\\/code> without argument in order to have them called on place stopping.  <span id='\";auc(q,X5(e));q.a+=lKc;auc(q,X5(f));q.a+=kKc;auc(q,X5(g));q.a+=\"'><\\/span> <div class='showcase-sample-block'> <div class='showcase-sample'> The place's roles are <ul> <li>Place factory in order to build place from the history token.<\\/li> <li>Host <code>ProxyView<\\/code> to get the view to display.<\\/li> <li>Place Tokenizer in order to register the token in the browser history.<\\/li> <\\/ul> Using the <a href='#!Injection'>Injection feature<\\/a> make it a pushover : <\\/div> <span id='\";auc(q,X5(h));q.a+=\"'><\\/span> <p>The <code>@ActivityDescription<\\/code> annotation have the following parameters :<\\/p> <ul> <li><code>view<\\/code> : The <code>Composite<\\/code> extending view class presented by this place<\\/li> <li><code>viewDecorator<\\/code> : The <code>ViewDecorator<\\/code> implementing class decorating the associated view<\\/li> <li><code>placeTokenizer<\\/code> : The <code>PlaceTokenizer<\\/code> implementing class used for this place<\\/li> <li><code>asyncView<\\/code> : indicate wether the view should be loaded via <code>GWT.runAsync<\\/code> or not (default is async)<\\/li> <li><code>aliases<\\/code> : list of the aliases associated to the place<\\/li> <li><code>scope<\\/code> : indicate wether the view should recreated at each call (<code>PROTOTYPE<\\/code>) or if the same view should be used everytime (<code>SINGLETON<\\/code> (default))<\\/li> <\\/ul> <\\/div>  <span id='\";auc(q,X5(i));q.a+=\"'><\\/span> <div class='showcase-sample-block'> <div class='showcase-sample'> To Initialize the framework. you have to : <ul> <li><strong>Set the display :<\\/strong> The display is a <code>AcceptsOneWidget<\\/code> which will receive the view when presented.<\\/li> <li><strong>Set the default place :<\\/strong> The place to present when no place are presented.<\\/li> <li><strong>Register acitivity :<\\/strong> All activities are created from the registered places.<\\/li> <li><strong>Handle the current history :<\\/strong> Handle the current history token or go to the default place.<\\/li> <\\/ul> The <code>ViewPlace<\\/code> implements <code>ActivityFactory<\\/code> when rebinded via the <a href='#!Injection'>Injection feature<\\/a>, so it can be registered in the <code>MvpController<\\/code>. <\\/div> <span id='\";auc(q,X5(j));q.a+=\"'><\\/span> <\\/div>  <div class='showcase-sample-block'> <div class='showcase-sample'> If you use the <a href='#!Injection'>Injection features<\\/a>, you can use the annotations to do the same things.<br> You just need to implement the <code>Module<\\/code> interface instead of <code>EntryPoint<\\/code>. <\\/div> <span id='\";auc(q,X5(k));q.a+=\"'><\\/span> <p>The <code>@MvpDescription<\\/code> annotation have the following parameters :<\\/p> <ul> <li><code>display<\\/code> : The <code>AcceptOneWidget<\\/code> extending component which will receive the view when presented. <\\/li> <li><code>defaultPlace<\\/code> : The <code>Place<\\/code> extending place to present when no place are presented<\\/li> <li><code>activities<\\/code> : The list of <code>ActivityFactory<\\/code> to register. they are registered with the following code <code>mvpController.registerActivity(GWT.&lt;ActivityFactory&gt; create(<em>class<\\/em>))<\\/code>. The <code>ViewPlace<\\/code> extending places are accepted, because they are rebinded to <code>ViewProxy<\\/code> (wich extends <code>ActivityFactory<\\/code>) and <code>ActionPlace<\\/code> too because they implements directly <code>ActivityFactory<\\/code>.  <\\/li> <li><code>handleCurrentHistory<\\/code> (default true) : Indicate wether or not the <code>MvpController.get().handleCurrentHistory()<\\/code> is called at the end of module init<\\/li> <\\/ul> <div class='showcase-sample'> You can add some methods annotated with <code>@EntryPointHandler<\\/code> to add some comportment at init time. <\\/div> <span id='\";auc(q,X5(l));q.a+=kKc;auc(q,X5(m));q.a+=\"'><\\/span> <div class='showcase-sample-block'> <div class='showcase-sample'> Then, you can go to any place by invoking the <code>MvController.goTo(...)<\\/code> method. <\\/div> <span id='\";auc(q,X5(n));q.a+=lKc;auc(q,X5(o));q.a+=\"'><\\/span> <p>Thanks to the <strong title='Punami Web Toolkit'>PWT<\\/strong>'s <abbr title='Model View Presenter'>MVP<\\/abbr> Framework,  you don't have to care about scaling your web app.  <br>  Each Places generates a <code>ViewProxy<\\/code> from the <code>View<\\/code> which use the <code>GWT.runAsync(...)<\\/code> mechanism. This mechanism allows to split your application in chunks. All the JavaScript is no more downloaded at once, but is got back during the user session. <\\/p> <div class='showcase-sample-block'> <div class='showcase-sample'> <strong class='showcase-sample'>ViewProxy generated<\\/strong> <\\/div> <span id='\";auc(q,X5(p));q.a+=$Jc;return new I5(q.a)}\ns3(1364,46,_Jc);var AY=Erc(JIc,'NavigationPage',1364,UU);s3(903,1364,aKc,F9b);_.vh=function G9b(a,b){R$b(this);b.xe(this)};var wY=Erc(JIc,'NavigationPage_Injector',903,AY);s3(991,1,{},J9b);var xY=Erc(JIc,'NavigationPage_NavigationPageTemplateBinder_UiBinderLocalized_BinderImpl/Widgets',991,B1);var N9b;s3(645,1,wIc);_.Je=function X9b(){var a;!(a5(),N9b)&&(N9b=new F9b);a=new U$b;yjb(a,N9b);rjb(this.a,a)};BEc(Vt)(10);\n//# sourceURL=Documentation-10.js\n")
